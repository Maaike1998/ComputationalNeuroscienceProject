##Import packages, import data
import tensorflow as tf
from tensorflow import keras

import numpy as np
import matplotlib
import matplotlib.pyplot as plt

print(tf.__version__)

mnist =  keras.datasets.mnist
(train_imgs, train_labs), (test_imgs, test_labs) = mnist.load_data()

train_imgs = train_imgs/255.0
test_imgs = test_imgs/255.0

##Split training data into 3 groups
train_imgs_1=train_imgs[:20000]
train_imgs_2=train_imgs[20000:40000]
train_imgs_3=train_imgs[40000:]
train_labs_1=train_labs[:20000]
train_labs_2=train_labs[20000:40000]
train_labs_3=train_labs[40000:]

#Create 2 different orders of data so that every image is in both input groups
train_combo_1=np.concatenate((train_imgs_1,train_imgs_2,train_imgs_3))
train_combo_2=np.concatenate((train_imgs_2,train_imgs_3,train_imgs_1))

train_labs_combo_1=np.concatenate((train_labs_1,train_labs_2,train_labs_3))
train_labs_combo_2=np.concatenate((train_labs_2,train_labs_3,train_labs_1))
train_labs_addition = train_labs_combo_1+train_labs_combo_2 #Add labels - labels are now between 0 and 18

#Create 2 test input sets
test_imgs_1=test_imgs[:5000]
test_imgs_2=test_imgs[5000:]
test_labs_1=test_labs[:5000]
test_labs_2=test_labs[5000:]
test_labs_addition = test_labs_1+test_labs_2

#Input one - layers as in Esthers code, untill 10 nodes are left, representing the 10 different numbers
input1 = keras.layers.Input(shape=(28,28))
flatten1 = keras.layers.Flatten(input_shape=(28,28))(input1)
l1_1 = keras.layers.Dense(32, activation='sigmoid')(flatten1)
l2_1 = keras.layers.Dense(32, activation='sigmoid')(l1_1)
l3_1 = keras.layers.Dense(10, activation='sigmoid')(l2_1)

#Input 2
input2= keras.layers.Input(shape=(28,28))
flatten2 = keras.layers.Flatten(input_shape=(28,28))(input2)
l1_2 = keras.layers.Dense(32, activation='sigmoid')(flatten2)
l2_2 = keras.layers.Dense(32, activation='sigmoid')(l1_2)
l3_2 = keras.layers.Dense(10, activation='sigmoid')(l2_2)

#Concatenate
concatenated = keras.layers.Concatenate()([l3_1, l3_2])
l4 = keras.layers.Dense(32, activation = 'sigmoid')(concatenated)

#Output consists of 19 nodes representing 0 to 18
out= keras.layers.Dense(19)(l4)

#model
model_2 = keras.models.Model(inputs=[input1, input2], outputs = out)
model_2.compile(optimizer='adam', loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy'])
params_model_add = model_2.fit([train_combo_1, train_combo_2], train_labs_addition, epochs = 20, shuffle=True)

#evaluate model --> Why is test accuracy so low?????
test_loss, test_acc = model_task.evaluate([test_imgs_1, test_imgs_2],  test_labs_addition, verbose=2)
print('test acc:', test_acc)

all_loss_task = params_model_add.history['loss']
all_acc_task = params_model_add.history['acc']
plt.plot(all_loss_task, label='loss')
plt.plot(all_acc_task, label='accuracy')
plt.legend()
plt.show()


